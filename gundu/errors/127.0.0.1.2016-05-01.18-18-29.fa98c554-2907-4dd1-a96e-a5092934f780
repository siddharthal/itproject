(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: '10:00'"
p3
sS'layer'
p4
S'/home/siddhartha/web2/web2py/applications/gundu/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n@auth.requires_login()\ndef c_team():\n    form = SQLFORM(db.teams)#.process(next=URL(\'index\'))\n    if form.process().accepted:\n    \tresponse.flash = "team created"\n        q=db(db.teams.id>0).select(orderby=~db.teams.created_on)\n        r=db(db.tble.id>0).select(db.tble.id)\n        if q[0].id not in r:\n            db.tble.insert(teams=q[0].id,person=auth.user_id)\n    elif form.errors:\n        response.flash = "Errors"\n    else:\n        response.flash = "Please fill the form"\n    return locals()\n@auth.requires_login()\ndef chooseteam():\n    if session.var is 1:\n        response.flash="team choosen"\n        session.var=0\n    elif session.var is 2:\n        response.flash="already in the team"\n        session.var=0\n    else:\n        response.flash="choose a team"\n    teams=db(db.teams.id>0).select()\n    return locals()\n@auth.requires_login()\n\ndef show():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    p=db((db.tble.person==auth.user_id) & (db.tble.teams==i.id) ).count()\n    if p is 0:\n        db.tble.insert(person=auth.user_id,teams=i.id)\n        session.var=1\n    else:\n        session.var=2\n    redirect(URL(\'chooseteam\'))\n    return locals()\n@auth.requires_login()\n\ndef myteams():\n    p=db(db.teams.created_by==auth.user_id).select()\n    if session.flag is 0:\n        response.flash="min 5 members required"\n    if session.flag is 1:\n        if session.v is 1:\n            response.flash="moderator choosen"\n            session.v=0\n        if session.v is 2:\n            response.flash="already choosen"\n            session.v=0\n    return locals()\n@auth.requires_login()\n\ndef details():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    session.req=i.id\n    array=db(db.tble.teams==i.id).select()\n    session.c=db(db.tble.teams==i.id).count()\n    return locals()\n@auth.requires_login()\n\ndef details1():\n    i = db.tble(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    if session.c>=5:\n        m=db(db.teams.id==session.req).select()\n        if m[0].moderator is None:\n            db(db.teams.id==session.req).update(moderator=i.person)\n            session.v=1\n        else:\n            session.v=2\n        session.flag=1\n    else:\n        session.flag=0\n    redirect(URL(\'myteams\'))\n    return locals()\n@auth.requires_login()\n\ndef home():\n    return locals()\n@auth.requires_login()\n\ndef mail():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    pro=db(db.teams.id==i.id).select()\n    ma=db(db.mail1.teams==i.id).select(orderby=~db.mail1.created_on)\n    if (pro[0].moderator==auth.user_id):\n        flag=1\n    else:\n        flag=0\n    session.popo=i.id\n    return locals()\n@auth.requires_login()\n\ndef sendmail():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    form=SQLFORM(db.mail1)#.process()\n    if form.process().accepted:\n    \tresponse.flash = "mail sent"\n        my=db(db.mail1).select(orderby=~db.mail1.created_on)\n        dhoni=db(db.teams.id==session.popo).select()\n        if (dhoni[0].moderator==my[0].created_by):\n            db(db.mail1.id==my[0].id).update(moderator=1,teams=session.popo)\n        else:\n            db(db.mail1.id==my[0].id).update(moderator=0,teams=session.popo)\n    elif form.errors:\n        response.flash = "pls check subject and body"\n    return locals()\n@auth.requires_login()\n\ndef teamin():\n    q=db(db.tble.person==auth.user_id).select()\n    return locals()\ndef mail2():\n    i = db.tble(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    pro=db(db.teams.id==i.teams).select()\n    ma=db(db.mail1.teams==i.teams).select(orderby=~db.mail1.created_on)\n    if (pro[0].moderator==auth.user_id):\n        flag=1\n    else:\n        flag=0\n    session.popo=i.teams\n    return locals()\n@auth.requires_login()\n\ndef memo():\n    p=db(db.teams.moderator==auth.user_id).select()\n    return locals()\ndef fullmail():\n    i = db.mail1(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    return locals()\ndef c_agenda():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    if(i.moderator!=auth.user_id):\n        redirect(URL(\'logo\'))\n    form=SQLFORM(db.agenda)#.process()\n    if form.process().accepted:\n    \tresponse.flash = "agenda created"\n        q=db(db.agenda.id>0).select(orderby=~db.agenda.created_on)\n        db(db.agenda.id==q[0].id).update(teams=i.id)\n    elif form.errors:\n        response.flash = "Errors"\n    else:\n        response.flash = "Please fill the form"\n    return locals()\n@auth.requires_login()\ndef logo():\n    return locals()\n@auth.requires_login()\n\ndef agenda():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    yuvi=db(db.agenda.teams==i.id).select()\n    session.pastore=i.moderator\n    return locals()\n@auth.requires_login()\n\ndef full():\n    i = db.agenda(request.args(0,cast=int)) or redirect(URL(\'logo\'))\n    form=SQLFORM(db.topic)\n    pandya=db(db.topic.agenda==i.id).select()\n    session.pro=i.id\n    if form.process().accepted:\n    \tresponse.flash = "topic added"\n        q=db(db.topic.id>0).select(orderby=~db.topic.created_on)\n        db(db.topic.id==q[0].id).update(agenda=i.id)\n        redirect(URL(\'full\',args=i.id))\n    elif form.errors:\n        response.flash = "Errors"\n    return locals()\n@auth.requires_login()\n\ndef topic():\n    session.flow=1\n    redirect((URL(\'full\',args=session.pro)))\n    return locals()\n\nresponse._vars=response._caller(c_agenda)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/siddhartha/web2/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/siddhartha/web2/web2py/applications/gundu/controllers/default.py", line 238, in <module>\n  File "/home/siddhartha/web2/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/siddhartha/web2/web2py/applications/gundu/controllers/default.py", line 199, in c_agenda\n    q=db(db.agenda.id>0).select(orderby=~db.agenda.created_on)\n  File "/home/siddhartha/web2/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/siddhartha/web2/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/siddhartha/web2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/siddhartha/web2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1253, in _select_aux\n    self.execute(sql)\n  File "/home/siddhartha/web2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/siddhartha/web2/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/usr/lib/python2.7/sqlite3/dbapi2.py", line 67, in convert_timestamp\n    year, month, day = map(int, datepart.split("-"))\nValueError: invalid literal for int() with base 10: \'10:00\'\n'
p11
s.