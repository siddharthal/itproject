(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> "
p3
sS'layer'
p4
S'/home/manonidh/Videos/web2py/applications/gundu/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n@auth.requires_login()\ndef c_team():\n    form = SQLFORM(db.teams)#.process(next=URL(\'index\'))\n    if form.process().accepted:\n    \tresponse.flash = "1 record inserted"\n        q=db(db.teams.id>0).select(orderby=~db.teams.created_on)\n        r=db(db.tble.id>0).select(db.tble.id)\n        if q[0].id not in r:\n            db.tble.insert(teams=q[0].id,person=auth.user_id)\n    elif form.errors:\n        response.flash = "Errors"\n    else:\n        response.flash = "Please fill the form"\n    return dict(form=form)\n@auth.requires_login()\ndef chooseteam():\n    if session.var is 1:\n        response.flash="team choosen"\n        session.var=0\n    elif session.var is 2:\n        response.flash="already in the team"\n        session.var=0\n    else:\n        response.flash="choose a team"\n    teams=db(db.teams.id>0).select()\n    return locals()\ndef show():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    p=db((db.tble.person==auth.user_id) & (db.tble.teams==i.id) ).count()\n    if p is 0:\n        db.tble.insert(person=auth.user_id,teams=i.id)\n        session.var=1\n    else:\n        session.var=2\n    redirect(URL(\'chooseteam\'))\n    return locals()\ndef myteams():\n    p=db(db.teams.created_by==auth.user_id).select()\n    return locals()\ndef details():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    session.req=i.id\n    session.q=i.teams\n    array=db(db.tble.teams==i.id).select()\n    session.c=db(db.tble.teams==i.id).count()\n    return locals()\ndef details1():\n    i = db.teams(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    if session.c>5:\n        m=db(db.teams.id==session.q).select()\n        if m.moderator is None:\n            db(db.teams.id==session.q).update(moderator=i.person)\n            session.v=1\n        else:\n            session.v=2\n        redirect(URL(\'details/=i.id\'))\n    return locals()\ndef home():\n    return locals()\n\nresponse._vars=response._caller(details)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/manonidh/Videos/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/manonidh/Videos/web2py/applications/gundu/controllers/default.py", line 119, in <module>\n  File "/home/manonidh/Videos/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/manonidh/Videos/web2py/applications/gundu/controllers/default.py", line 101, in details\n    session.q=i.teams\n  File "/home/manonidh/Videos/web2py/gluon/packages/dal/pydal/objects.py", line 90, in __getattr__\n    raise AttributeError\nAttributeError\n'
p11
s.